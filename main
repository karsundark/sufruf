import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ =====
TOKEN = "8008211499:AAFUuCnNQNR9R76g3fMioo3F2yejZoLnqJk"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# ===== –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ =====
LANGUAGES = ["–ö–∞–∑–∞—Ö—Å–∫–∏–π (“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ)", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π (English)", "–¢—É—Ä–µ—Ü–∫–∏–π (T√ºrk√ße)", "–ò—Å–ø–∞–Ω—Å–∫–∏–π (Espa√±ol)", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π (Fran√ßais)", "–ö–æ—Ä–µ–π—Å–∫–∏–π (ÌïúÍµ≠Ïñ¥)", 
"–†—É—Å—Å–∫–∏–π (–†—É—Å—Å–∫–∏–π)", "–ê—Ä–∞–±—Å–∫–∏–π (ÿßŸÑÿπÿ±ÿ®Ÿäÿ©)", "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π (Italiano)", "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π (Portugu√™s)", "–ö–∏—Ç–∞–π—Å–∫–∏–π (‰∏≠Êñá - Mandarin)", "–Ø–ø–æ–Ω—Å–∫–∏–π (Êó•Êú¨Ë™û)", 
"–£–∑–±–µ–∫—Å–∫–∏–π (O‚Äòzbek tili)", "–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π (–ö—ã—Ä–≥—ã–∑ —Ç–∏–ª–∏)", "–ù–µ–º–µ—Ü–∫–∏–π (Deutsch)"]

# ===== –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è =====
ACHIEVEMENTS = {
    "5_messages": {"text": "üë∂ –ù–æ–≤–∏—á–æ–∫ ‚Äì 5 —Å–æ–æ–±—â–µ–Ω–∏–π", "goal": 5},
    "20_messages": {"text": "üí¨ –ë–æ–ª—Ç—É–Ω ‚Äì 20 —Å–æ–æ–±—â–µ–Ω–∏–π", "goal": 20},
    "50_messages": {"text": "üî• –ì–æ–≤–æ—Ä—É–Ω ‚Äì 50 —Å–æ–æ–±—â–µ–Ω–∏–π", "goal": 50},
    "100_messages": {"text": "üèÜ –õ–µ–≥–µ–Ω–¥–∞ ‚Äì 100 —Å–æ–æ–±—â–µ–Ω–∏–π", "goal": 100},
    "first_partner": {"text": "ü§ù –ü–µ—Ä–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫", "goal": 1}
}

# ===== –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π =====
# –ö–ª—é—á ‚Äì user_id, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏:
# username, known (—Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —è–∑—ã–∫–æ–≤),
# learning (—è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è), partner (ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞),
# blocked (–º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID),
# stats (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤),
# achievements (—Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∞—á–∏–≤–æ–∫)
users = {}

# ===== –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ =====
def generate_language_keyboard(prefix, selected_languages=[]):
    keyboard = InlineKeyboardMarkup(row_width=2)
    for lang in LANGUAGES:
        status = "‚úÖ " if lang in selected_languages else ""
        keyboard.add(InlineKeyboardButton(text=f"{status}{lang}", callback_data=f"{prefix}_{lang}"))
    if prefix == "known":
        keyboard.add(InlineKeyboardButton("‚úÖ –î–∞–ª–µ–µ", callback_data="choose_learning"))
    return keyboard

# ===== –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =====
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    users[message.from_user.id] = {
        "username": message.from_user.username,
        "known": [],
        "learning": None,
        "partner": None,
        "blocked": set(),
        "stats": {"messages": 0, "partners": 0},
        "achievements": []
    }
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–Ω–∞–µ—Ç–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", 
        reply_markup=generate_language_keyboard("known")
    )

# ===== –í—ã–±–æ—Ä –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —è–∑—ã–∫–æ–≤ =====
@dp.callback_query_handler(lambda c: c.data.startswith("known_"))
async def select_known_language(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    lang = callback_query.data.split("_")[1]
    if lang in users[user_id]["known"]:
        users[user_id]["known"].remove(lang)
    else:
        users[user_id]["known"].append(lang)
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–Ω–∞–µ—Ç–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n"
        f"–í–∞—à –≤—ã–±–æ—Ä: {', '.join(users[user_id]['known'])}",
        reply_markup=generate_language_keyboard("known", users[user_id]["known"])
    )

# ===== –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞ =====
@dp.callback_query_handler(lambda c: c.data == "choose_learning")
async def ask_learning_language(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—á–∏—Ç—å:",
        reply_markup=generate_language_keyboard("learning")
    )

@dp.callback_query_handler(lambda c: c.data.startswith("learning_"))
async def select_learning_language(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    lang = callback_query.data.split("_")[1]
    users[user_id]["learning"] = lang
    await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫: {lang}")
    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    menu = ReplyKeyboardMarkup(resize_keyboard=True)
    menu.add(KeyboardButton("–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"))
    menu.add(KeyboardButton("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä"),
             KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —è–∑—ã–∫–∏"),
             KeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"))
    admin_id = 666324876
    await bot.send_message(admin_id, users[user_id])
    await bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!", reply_markup=menu)

# ===== –ö–æ–º–∞–Ω–¥–∞ /reset ‚Äì —Å–±—Ä–æ—Å —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ =====
@dp.message_handler(lambda message: message.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å —è–∑—ã–∫–∏")
async def reset_languages(message: types.Message):
    user_id = message.from_user.id
    users[user_id] = {
        "username": users[user_id]["username"],
        "known": [],
        "learning": None,
        "partner": None,
        "blocked": set(),
        "stats": {"messages": 0, "partners": 0},
        "achievements": []
    }
    await message.answer("–í—ã —Å–±—Ä–æ—Å–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–∏ –∑–∞–Ω–æ–≤–æ!", reply_markup=generate_language_keyboard("known"))

# ===== –ö–æ–º–∞–Ω–¥–∞ /block ‚Äì –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ =====
@dp.message_handler(lambda message: message.text == "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def block_user(message: types.Message):
    user_id = message.from_user.id
    partner_id = users[user_id]["partner"]
    if partner_id:
        users[user_id]["blocked"].add(partner_id)
        users[partner_id]["blocked"].add(user_id)
        users[user_id]["partner"] = None
        users[partner_id]["partner"] = None
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        await bot.send_message(partner_id, "üö´ –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—Å.")
    else:
        await message.answer("–ù–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")

# ===== –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ =====
@dp.message_handler(lambda message: message.text == "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä")
async def stop_conversation(message: types.Message):
    user_id = message.from_user.id
    partner_id = users[user_id]["partner"]
    if partner_id:
        users[user_id]["partner"] = None
        users[partner_id]["partner"] = None
        await message.answer("üö´ –í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä. –ù–∞–π–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–∞–∂–∞–≤ '–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞'.")
        await bot.send_message(partner_id, "üö´ –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

# ===== –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ =====
@dp.message_handler(lambda message: message.text == "–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def find_partner(message: types.Message):
    user_id = message.from_user.id
    known_languages = users[user_id]["known"]
    learning_language = users[user_id]["learning"]
    for partner_id, partner_data in users.items():
        if partner_id != user_id and partner_data["learning"] in known_languages and learning_language in partner_data["known"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            if user_id in partner_data["blocked"] or partner_id in users[user_id]["blocked"]:
                continue
            users[user_id]["partner"] = partner_id
            users[partner_id]["partner"] = user_id
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            users[user_id]["stats"]["partners"] += 1
            users[partner_id]["stats"]["partners"] += 1

            user_known = ", ".join(users[user_id]["known"])
            partner_known = ", ".join(partner_data["known"])
            await bot.send_message(partner_id, f"–ú—ã –Ω–∞—à–ª–∏ –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: @{users[user_id]['username']}!\n"
                                               f"–Ø–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –∑–Ω–∞–µ—Ç: {user_known}\n"
                                               f"–û–Ω —Ö–æ—á–µ—Ç –∏–∑—É—á–∞—Ç—å: {learning_language}\n\n–ù–∞—á–Ω–∏—Ç–µ —á–∞—Ç!")
            await message.answer(f"–ú—ã –Ω–∞—à–ª–∏ –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: @{partner_data['username']}!\n"
                                 f"–Ø–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –∑–Ω–∞–µ—Ç: {partner_known}\n"
                                 f"–û–Ω —Ö–æ—á–µ—Ç –∏–∑—É—á–∞—Ç—å: {partner_data['learning']}\n\n–ù–∞—á–Ω–∏—Ç–µ —á–∞—Ç!")
            return
    await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ===== –ß–∞—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ =====
@dp.message_handler(lambda message: message.from_user.id in users and users[message.from_user.id]["partner"])
async def chat(message: types.Message):
    sender_id = message.from_user.id
    partner_id = users[sender_id]["partner"]
    if partner_id:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        users[sender_id]["stats"]["messages"] += 1
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        new_achievements = check_achievements(sender_id)
        if new_achievements:
            await message.answer(f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {', '.join(new_achievements)}")
        await bot.send_message(partner_id, f"üí¨ @{users[sender_id]['username']}: {message.text}")

# ===== –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π =====
def check_achievements(user_id):
    user = users[user_id]
    new_ach = []
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
    if user["stats"]["messages"] >= 5 and "5_messages" not in user["achievements"]:
        user["achievements"].append("5_messages")
        new_ach.append(ACHIEVEMENTS["5_messages"]["text"])
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
    if user["stats"]["messages"] >= 20 and "20_messages" not in user["achievements"]:
        user["achievements"].append("20_messages")
        new_ach.append(ACHIEVEMENTS["20_messages"]["text"])
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
    if user["stats"]["messages"] >= 50 and "50_messages" not in user["achievements"]:
        user["achievements"].append("50_messages")
        new_ach.append(ACHIEVEMENTS["50_messages"]["text"])
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
    if user["stats"]["messages"] >= 100 and "100_messages" not in user["achievements"]:
        user["achievements"].append("100_messages")
        new_ach.append(ACHIEVEMENTS["100_messages"]["text"])
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    if user["stats"]["partners"] >= 1 and "first_partner" not in user["achievements"]:
        user["achievements"].append("first_partner")
        new_ach.append(ACHIEVEMENTS["first_partner"]["text"])
    return new_ach

# ===== –ö–æ–º–∞–Ω–¥–∞ /achievements –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π =====
@dp.message_handler(commands=["achievements"])
async def show_achievements(message: types.Message):
    user_id = message.from_user.id
    ach_list = [ACHIEVEMENTS[ach_id]["text"] for ach_id in users[user_id]["achievements"]]
    text = "\n".join(ach_list) if ach_list else "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."
    await message.answer(f"üèÖ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n{text}")

# ===== –ö–æ–º–∞–Ω–¥–∞ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ =====
@dp.message_handler(commands=["help"])
async def help_command(message: types.Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å\n/achievements - –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n/reset - —Å–±—Ä–æ—Å–∏—Ç—å —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n/block - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")

# ===== –ö–æ–º–∞–Ω–¥–∞ /reset —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ –∫–æ–º–∞–Ω–¥—É =====
@dp.message_handler(commands=["reset"])
async def reset_cmd(message: types.Message):
    user_id = message.from_user.id
    users[user_id] = {
        "username": users[user_id]["username"],
        "known": [],
        "learning": None,
        "partner": None,
        "blocked": set(),
        "stats": {"messages": 0, "partners": 0},
        "achievements": []
    }
    await message.answer("–í—ã —Å–±—Ä–æ—Å–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–∏ –∑–∞–Ω–æ–≤–æ!", reply_markup=generate_language_keyboard("known"))

# ===== –ö–æ–º–∞–Ω–¥–∞ /block –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ =====
@dp.message_handler(commands=["block"])
async def block_cmd(message: types.Message):
    user_id = message.from_user.id
    partner_id = users[user_id]["partner"]
    if partner_id:
        users[user_id]["blocked"].add(partner_id)
        users[partner_id]["blocked"].add(user_id)
        users[user_id]["partner"] = None
        users[partner_id]["partner"] = None
        await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        await bot.send_message(partner_id, "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—Å.")
    else:
        await message.answer("–ù–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
